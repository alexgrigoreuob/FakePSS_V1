namespace NS.Booking.Domain.Payment.Models
{
    using Newshore.Core.DDD.Concepts;
    using Newshore.Core.IoC;
    using Newshore.Core.NativeObjects.Extensions;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using NS.Booking.Common.Domain.Common.Validators;
    using NS.Booking.Domain._JsonConverters;
    using NS.Booking.Domain.Payment.Enums;
    using System;
    using System.Collections.Generic;

    [JsonConverter(typeof(PaymentJsonConverter))]
    public class Payment : AggregateRoot
    {
        private readonly List<IValidator<Payment>> _validators;

        public Payment()
        {
            _validators = IoCContainer.Instance.ResolveAll<IValidator<Payment>>();
        }

        /// <summary>
        /// This fields contains a payment type, like "External"
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public PaymentType PaymentType { get; set; }

        public string Currency { get; set; }

        public decimal Amount { get; set; }

        public DateTime PaymentDate { get; set; }

        [JsonConverter(typeof(StringEnumConverter))]
        public PaymentStatus Status { get; set; }

        /// <summary>
        /// Autogenerated Id, needs ReferenceId to be populated to return a unique value.
        /// </summary>
        /// <value>Hexadecimal string.</value>
        public override string Id
        {
            get
            {
                if (string.IsNullOrEmpty(ReferenceId)) return null;
                var value = $"{PaymentType}~{Amount}~{Currency}~{ReferenceId}";
                return value.EncodeHexadecimal();
            }
        }

        /// <summary>
        /// Use to save PSS reference value for the payment, once set Payment Id will be populated.
        /// </summary>
        /// <value>Can be PaymentId, Creation time, etc. Any unique value generated by the PSS to identify the payment as unique.</value>
        public string ReferenceId { get; set; }

        public void Validate()
        {
            _validators.ForEach(x => x.Validate(this));
        }
    }
}
